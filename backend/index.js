import dotenv from 'dotenv';  // –∑–∞–≥—Ä—É–∑–∫–∞ .env
import path from "path";

// –∑–∞–≥—Ä—É–∂–∞–µ–º .env —Å—Ä–∞–∑—É
dotenv.config({ path: path.resolve('./.env') });

import express from "express";
import cors from "cors";
import mongoose from "mongoose";

const app = express();
app.use(cors());
app.use(express.json());


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log("MONGO_URI:", process.env.MONGO_URI);
console.log("PORT:", process.env.PORT);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º MongoDB Atlas
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("‚úÖ MongoDB Atlas –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!");
  } catch (error) {
    console.error("‚ùå –°–µ—Ä–≤–∞–∫ –Ω–∞ MONGO ATLAS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:", error.message);
    process.exit(1);
  }
};

connectDB();

app.get("/", (req, res) => {
  res.send("–°–µ—Ä–≤–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ");
});

app.listen(process.env.PORT, () => {
  console.log(`–°–µ—Ä–≤–∞–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT}`);
});
